/*
MOB PROGRAMMING TRAINING

    How it works:
        Setting up the environment / discussing which language will be used (if not just Java) can be done outside the "MOB".
        When everything is done (environment setup, team is ready for development) they should receive the first assignment (A).
        The Product Owner (PO) will give them a first requirement like: I + I. If they succeeded the PO should check how they implemented the requirement.
        After they have shown a working implementation the PO gives them a new requirement like: I + III.
        ~ Challenge the team! If they just add the two numbers in one string ("I" + "I") for example, then do NOT give them: I + II as it will directly work.
            It is to the PO to read their implementation and find a challenging new requirement (such as I + III in this case).
        If the PO doesn't know any requirement anymore as they solved everything possible with I to X, then go to assignment B (etc.).

        Is a team really fast? Then try to implement a PO in their team. This can also rotate! This will make it harder as they can get more discussions.

    Assignments - MOB PROGRAMMING:
        A: [ difficultLevel (0-5): 0 ] Make a method to calculate the SUM from two roman numerals.
        B: [ difficultLevel (0-5): 1 ] Make a method to calculate the sum from one roman numeral MINUS another roman numeral.
        C: [ difficultLevel (0-5): 2 ] Make a method to calculate the sum from one roman numeral MULTIPLIED by another roman numeral.
        D: [ difficultLevel (0-5): 4 ] Make a method to calculate the sum from one roman numeral DIVIDED by another roman numeral (rounded to first number).

    It is NOT allowed to:
        - Use integers/doubles/numbers etc.
        - Use methods that return integers/doubles/numbers etc. (e.g. .length() returns a number which is not allowed!).

    It IS allowed to:
        - Work with Strings.
        - Work with booleans.
        - Use any coding language you like (prefer: Type safe language to make sure you really don't use a number).

    Code must be:
        - Unit tested (TDD) - TDD: First write the test, then the code.
        - May not have any linting errors!


        ~ Test in this project contains: ~
              The test in this project can be used to test your own code (Java). Please note that:
                  - Your code should support all numbers possible with I to X.
                  - The test will test all different assignments.
                    - If you only implement A, the others will fail.
*/
